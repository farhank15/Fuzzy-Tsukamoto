// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/academic/interface.go

// Package academic is a generated GoMock package.
package academic

import (
	context "context"
	academic "go-tsukamoto/internal/app/dto/academic"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAcademicService is a mock of AcademicService interface.
type MockAcademicService struct {
	ctrl     *gomock.Controller
	recorder *MockAcademicServiceMockRecorder
}

// MockAcademicServiceMockRecorder is the mock recorder for MockAcademicService.
type MockAcademicServiceMockRecorder struct {
	mock *MockAcademicService
}

// NewMockAcademicService creates a new mock instance.
func NewMockAcademicService(ctrl *gomock.Controller) *MockAcademicService {
	mock := &MockAcademicService{ctrl: ctrl}
	mock.recorder = &MockAcademicServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcademicService) EXPECT() *MockAcademicServiceMockRecorder {
	return m.recorder
}

// CreateAcademic mocks base method.
func (m *MockAcademicService) CreateAcademic(ctx context.Context, req *academic.CreateAcademicRequest) (*academic.AcademicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAcademic", ctx, req)
	ret0, _ := ret[0].(*academic.AcademicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcademic indicates an expected call of CreateAcademic.
func (mr *MockAcademicServiceMockRecorder) CreateAcademic(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcademic", reflect.TypeOf((*MockAcademicService)(nil).CreateAcademic), ctx, req)
}

// DeleteAcademic mocks base method.
func (m *MockAcademicService) DeleteAcademic(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAcademic", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAcademic indicates an expected call of DeleteAcademic.
func (mr *MockAcademicServiceMockRecorder) DeleteAcademic(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcademic", reflect.TypeOf((*MockAcademicService)(nil).DeleteAcademic), ctx, id)
}

// GetAcademicByID mocks base method.
func (m *MockAcademicService) GetAcademicByID(ctx context.Context, id int) (*academic.AcademicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcademicByID", ctx, id)
	ret0, _ := ret[0].(*academic.AcademicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcademicByID indicates an expected call of GetAcademicByID.
func (mr *MockAcademicServiceMockRecorder) GetAcademicByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcademicByID", reflect.TypeOf((*MockAcademicService)(nil).GetAcademicByID), ctx, id)
}

// GetAcademicsByUserID mocks base method.
func (m *MockAcademicService) GetAcademicsByUserID(ctx context.Context, userID int) ([]*academic.AcademicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcademicsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*academic.AcademicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcademicsByUserID indicates an expected call of GetAcademicsByUserID.
func (mr *MockAcademicServiceMockRecorder) GetAcademicsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcademicsByUserID", reflect.TypeOf((*MockAcademicService)(nil).GetAcademicsByUserID), ctx, userID)
}

// GetAllAcademics mocks base method.
func (m *MockAcademicService) GetAllAcademics(ctx context.Context) ([]*academic.AcademicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAcademics", ctx)
	ret0, _ := ret[0].([]*academic.AcademicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAcademics indicates an expected call of GetAllAcademics.
func (mr *MockAcademicServiceMockRecorder) GetAllAcademics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAcademics", reflect.TypeOf((*MockAcademicService)(nil).GetAllAcademics), ctx)
}

// UpdateAcademic mocks base method.
func (m *MockAcademicService) UpdateAcademic(ctx context.Context, id int, req *academic.UpdateAcademicRequest) (*academic.AcademicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcademic", ctx, id, req)
	ret0, _ := ret[0].(*academic.AcademicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcademic indicates an expected call of UpdateAcademic.
func (mr *MockAcademicServiceMockRecorder) UpdateAcademic(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcademic", reflect.TypeOf((*MockAcademicService)(nil).UpdateAcademic), ctx, id, req)
}
