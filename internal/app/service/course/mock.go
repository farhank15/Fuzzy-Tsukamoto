// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/course/interface.go

// Package course is a generated GoMock package.
package course

import (
	context "context"
	course "go-tsukamoto/internal/app/dto/course"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCourseServiceInterface is a mock of CourseServiceInterface interface.
type MockCourseServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCourseServiceInterfaceMockRecorder
}

// MockCourseServiceInterfaceMockRecorder is the mock recorder for MockCourseServiceInterface.
type MockCourseServiceInterfaceMockRecorder struct {
	mock *MockCourseServiceInterface
}

// NewMockCourseServiceInterface creates a new mock instance.
func NewMockCourseServiceInterface(ctrl *gomock.Controller) *MockCourseServiceInterface {
	mock := &MockCourseServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCourseServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseServiceInterface) EXPECT() *MockCourseServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateCourse mocks base method.
func (m *MockCourseServiceInterface) CreateCourse(ctx context.Context, req *course.CreateCourseRequest) (*course.CourseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", ctx, req)
	ret0, _ := ret[0].(*course.CourseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockCourseServiceInterfaceMockRecorder) CreateCourse(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockCourseServiceInterface)(nil).CreateCourse), ctx, req)
}

// DeleteCourse mocks base method.
func (m *MockCourseServiceInterface) DeleteCourse(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourse", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourse indicates an expected call of DeleteCourse.
func (mr *MockCourseServiceInterfaceMockRecorder) DeleteCourse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourse", reflect.TypeOf((*MockCourseServiceInterface)(nil).DeleteCourse), ctx, id)
}

// GetCourseByID mocks base method.
func (m *MockCourseServiceInterface) GetCourseByID(ctx context.Context, id int) (*course.CourseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseByID", ctx, id)
	ret0, _ := ret[0].(*course.CourseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseByID indicates an expected call of GetCourseByID.
func (mr *MockCourseServiceInterfaceMockRecorder) GetCourseByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseByID", reflect.TypeOf((*MockCourseServiceInterface)(nil).GetCourseByID), ctx, id)
}

// GetCourses mocks base method.
func (m *MockCourseServiceInterface) GetCourses(ctx context.Context) ([]*course.CourseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourses", ctx)
	ret0, _ := ret[0].([]*course.CourseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourses indicates an expected call of GetCourses.
func (mr *MockCourseServiceInterfaceMockRecorder) GetCourses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourses", reflect.TypeOf((*MockCourseServiceInterface)(nil).GetCourses), ctx)
}

// ImportCourses mocks base method.
func (m *MockCourseServiceInterface) ImportCourses(ctx context.Context, reqs []course.CreateCourseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCourses", ctx, reqs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportCourses indicates an expected call of ImportCourses.
func (mr *MockCourseServiceInterfaceMockRecorder) ImportCourses(ctx, reqs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCourses", reflect.TypeOf((*MockCourseServiceInterface)(nil).ImportCourses), ctx, reqs)
}

// UpdateCourse mocks base method.
func (m *MockCourseServiceInterface) UpdateCourse(ctx context.Context, id int, req *course.UpdateCourseRequest) (*course.CourseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", ctx, id, req)
	ret0, _ := ret[0].(*course.CourseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockCourseServiceInterfaceMockRecorder) UpdateCourse(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockCourseServiceInterface)(nil).UpdateCourse), ctx, id, req)
}
