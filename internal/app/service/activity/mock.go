// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/activity/interface.go

// Package activity is a generated GoMock package.
package activity

import (
	context "context"
	activity "go-tsukamoto/internal/app/dto/activity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActivityService is a mock of ActivityService interface.
type MockActivityService struct {
	ctrl     *gomock.Controller
	recorder *MockActivityServiceMockRecorder
}

// MockActivityServiceMockRecorder is the mock recorder for MockActivityService.
type MockActivityServiceMockRecorder struct {
	mock *MockActivityService
}

// NewMockActivityService creates a new mock instance.
func NewMockActivityService(ctrl *gomock.Controller) *MockActivityService {
	mock := &MockActivityService{ctrl: ctrl}
	mock.recorder = &MockActivityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityService) EXPECT() *MockActivityServiceMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method.
func (m *MockActivityService) CreateActivity(ctx context.Context, req *activity.CreateActivityRequest) (*activity.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", ctx, req)
	ret0, _ := ret[0].(*activity.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockActivityServiceMockRecorder) CreateActivity(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockActivityService)(nil).CreateActivity), ctx, req)
}

// DeleteActivity mocks base method.
func (m *MockActivityService) DeleteActivity(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActivity", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActivity indicates an expected call of DeleteActivity.
func (mr *MockActivityServiceMockRecorder) DeleteActivity(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActivity", reflect.TypeOf((*MockActivityService)(nil).DeleteActivity), ctx, id)
}

// GetActivitiesByUserID mocks base method.
func (m *MockActivityService) GetActivitiesByUserID(ctx context.Context, userID int) ([]*activity.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivitiesByUserID", ctx, userID)
	ret0, _ := ret[0].([]*activity.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivitiesByUserID indicates an expected call of GetActivitiesByUserID.
func (mr *MockActivityServiceMockRecorder) GetActivitiesByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivitiesByUserID", reflect.TypeOf((*MockActivityService)(nil).GetActivitiesByUserID), ctx, userID)
}

// GetActivityByID mocks base method.
func (m *MockActivityService) GetActivityByID(ctx context.Context, id int) (*activity.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityByID", ctx, id)
	ret0, _ := ret[0].(*activity.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityByID indicates an expected call of GetActivityByID.
func (mr *MockActivityServiceMockRecorder) GetActivityByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityByID", reflect.TypeOf((*MockActivityService)(nil).GetActivityByID), ctx, id)
}

// GetAllActivities mocks base method.
func (m *MockActivityService) GetAllActivities(ctx context.Context) ([]*activity.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActivities", ctx)
	ret0, _ := ret[0].([]*activity.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActivities indicates an expected call of GetAllActivities.
func (mr *MockActivityServiceMockRecorder) GetAllActivities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActivities", reflect.TypeOf((*MockActivityService)(nil).GetAllActivities), ctx)
}

// UpdateActivity mocks base method.
func (m *MockActivityService) UpdateActivity(ctx context.Context, id int, req *activity.UpdateActivityRequest) (*activity.ActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActivity", ctx, id, req)
	ret0, _ := ret[0].(*activity.ActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActivity indicates an expected call of UpdateActivity.
func (mr *MockActivityServiceMockRecorder) UpdateActivity(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActivity", reflect.TypeOf((*MockActivityService)(nil).UpdateActivity), ctx, id, req)
}
