// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/predicate/interface.go

// Package predicate is a generated GoMock package.
package predicate

import (
	context "context"
	models "go-tsukamoto/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPredicateRepositoryInterface is a mock of PredicateRepositoryInterface interface.
type MockPredicateRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPredicateRepositoryInterfaceMockRecorder
}

// MockPredicateRepositoryInterfaceMockRecorder is the mock recorder for MockPredicateRepositoryInterface.
type MockPredicateRepositoryInterfaceMockRecorder struct {
	mock *MockPredicateRepositoryInterface
}

// NewMockPredicateRepositoryInterface creates a new mock instance.
func NewMockPredicateRepositoryInterface(ctrl *gomock.Controller) *MockPredicateRepositoryInterface {
	mock := &MockPredicateRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPredicateRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredicateRepositoryInterface) EXPECT() *MockPredicateRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetByName mocks base method.
func (m *MockPredicateRepositoryInterface) GetByName(ctx context.Context, name string) (*models.Predicate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*models.Predicate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockPredicateRepositoryInterfaceMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockPredicateRepositoryInterface)(nil).GetByName), ctx, name)
}

// GetPredicateByID mocks base method.
func (m *MockPredicateRepositoryInterface) GetPredicateByID(ctx context.Context, id int) (*models.Predicate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPredicateByID", ctx, id)
	ret0, _ := ret[0].(*models.Predicate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPredicateByID indicates an expected call of GetPredicateByID.
func (mr *MockPredicateRepositoryInterfaceMockRecorder) GetPredicateByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredicateByID", reflect.TypeOf((*MockPredicateRepositoryInterface)(nil).GetPredicateByID), ctx, id)
}
