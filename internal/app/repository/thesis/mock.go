// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/thesis/interface.go

// Package thesis is a generated GoMock package.
package thesis

import (
	context "context"
	models "go-tsukamoto/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockThesisRepositoryInterface is a mock of ThesisRepositoryInterface interface.
type MockThesisRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockThesisRepositoryInterfaceMockRecorder
}

// MockThesisRepositoryInterfaceMockRecorder is the mock recorder for MockThesisRepositoryInterface.
type MockThesisRepositoryInterfaceMockRecorder struct {
	mock *MockThesisRepositoryInterface
}

// NewMockThesisRepositoryInterface creates a new mock instance.
func NewMockThesisRepositoryInterface(ctrl *gomock.Controller) *MockThesisRepositoryInterface {
	mock := &MockThesisRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockThesisRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThesisRepositoryInterface) EXPECT() *MockThesisRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateThesis mocks base method.
func (m *MockThesisRepositoryInterface) CreateThesis(ctx context.Context, thesis *models.Thesis) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThesis", ctx, thesis)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateThesis indicates an expected call of CreateThesis.
func (mr *MockThesisRepositoryInterfaceMockRecorder) CreateThesis(ctx, thesis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThesis", reflect.TypeOf((*MockThesisRepositoryInterface)(nil).CreateThesis), ctx, thesis)
}

// DeleteThesis mocks base method.
func (m *MockThesisRepositoryInterface) DeleteThesis(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThesis", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThesis indicates an expected call of DeleteThesis.
func (mr *MockThesisRepositoryInterfaceMockRecorder) DeleteThesis(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThesis", reflect.TypeOf((*MockThesisRepositoryInterface)(nil).DeleteThesis), ctx, id)
}

// GetAllTheses mocks base method.
func (m *MockThesisRepositoryInterface) GetAllTheses(ctx context.Context) ([]*models.Thesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTheses", ctx)
	ret0, _ := ret[0].([]*models.Thesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTheses indicates an expected call of GetAllTheses.
func (mr *MockThesisRepositoryInterfaceMockRecorder) GetAllTheses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTheses", reflect.TypeOf((*MockThesisRepositoryInterface)(nil).GetAllTheses), ctx)
}

// GetThesesByUserID mocks base method.
func (m *MockThesisRepositoryInterface) GetThesesByUserID(ctx context.Context, userID int) ([]*models.Thesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThesesByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.Thesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThesesByUserID indicates an expected call of GetThesesByUserID.
func (mr *MockThesisRepositoryInterfaceMockRecorder) GetThesesByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThesesByUserID", reflect.TypeOf((*MockThesisRepositoryInterface)(nil).GetThesesByUserID), ctx, userID)
}

// GetThesisByID mocks base method.
func (m *MockThesisRepositoryInterface) GetThesisByID(ctx context.Context, id int) (*models.Thesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThesisByID", ctx, id)
	ret0, _ := ret[0].(*models.Thesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThesisByID indicates an expected call of GetThesisByID.
func (mr *MockThesisRepositoryInterfaceMockRecorder) GetThesisByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThesisByID", reflect.TypeOf((*MockThesisRepositoryInterface)(nil).GetThesisByID), ctx, id)
}

// UpdateThesis mocks base method.
func (m *MockThesisRepositoryInterface) UpdateThesis(ctx context.Context, thesis *models.Thesis) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThesis", ctx, thesis)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThesis indicates an expected call of UpdateThesis.
func (mr *MockThesisRepositoryInterfaceMockRecorder) UpdateThesis(ctx, thesis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThesis", reflect.TypeOf((*MockThesisRepositoryInterface)(nil).UpdateThesis), ctx, thesis)
}
