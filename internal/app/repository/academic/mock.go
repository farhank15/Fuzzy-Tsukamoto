// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/academic/interface.go

// Package academic is a generated GoMock package.
package academic

import (
	context "context"
	models "go-tsukamoto/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAcademicRepositoryInterface is a mock of AcademicRepositoryInterface interface.
type MockAcademicRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAcademicRepositoryInterfaceMockRecorder
}

// MockAcademicRepositoryInterfaceMockRecorder is the mock recorder for MockAcademicRepositoryInterface.
type MockAcademicRepositoryInterfaceMockRecorder struct {
	mock *MockAcademicRepositoryInterface
}

// NewMockAcademicRepositoryInterface creates a new mock instance.
func NewMockAcademicRepositoryInterface(ctrl *gomock.Controller) *MockAcademicRepositoryInterface {
	mock := &MockAcademicRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAcademicRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcademicRepositoryInterface) EXPECT() *MockAcademicRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateAcademic mocks base method.
func (m *MockAcademicRepositoryInterface) CreateAcademic(ctx context.Context, academic *models.Academic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAcademic", ctx, academic)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAcademic indicates an expected call of CreateAcademic.
func (mr *MockAcademicRepositoryInterfaceMockRecorder) CreateAcademic(ctx, academic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcademic", reflect.TypeOf((*MockAcademicRepositoryInterface)(nil).CreateAcademic), ctx, academic)
}

// DeleteAcademic mocks base method.
func (m *MockAcademicRepositoryInterface) DeleteAcademic(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAcademic", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAcademic indicates an expected call of DeleteAcademic.
func (mr *MockAcademicRepositoryInterfaceMockRecorder) DeleteAcademic(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcademic", reflect.TypeOf((*MockAcademicRepositoryInterface)(nil).DeleteAcademic), ctx, id)
}

// GetAcademicByID mocks base method.
func (m *MockAcademicRepositoryInterface) GetAcademicByID(ctx context.Context, id int) (*models.Academic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcademicByID", ctx, id)
	ret0, _ := ret[0].(*models.Academic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcademicByID indicates an expected call of GetAcademicByID.
func (mr *MockAcademicRepositoryInterfaceMockRecorder) GetAcademicByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcademicByID", reflect.TypeOf((*MockAcademicRepositoryInterface)(nil).GetAcademicByID), ctx, id)
}

// GetAcademicsByUserID mocks base method.
func (m *MockAcademicRepositoryInterface) GetAcademicsByUserID(ctx context.Context, userID int) ([]*models.Academic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcademicsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.Academic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcademicsByUserID indicates an expected call of GetAcademicsByUserID.
func (mr *MockAcademicRepositoryInterfaceMockRecorder) GetAcademicsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcademicsByUserID", reflect.TypeOf((*MockAcademicRepositoryInterface)(nil).GetAcademicsByUserID), ctx, userID)
}

// GetAllAcademics mocks base method.
func (m *MockAcademicRepositoryInterface) GetAllAcademics(ctx context.Context) ([]*models.Academic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAcademics", ctx)
	ret0, _ := ret[0].([]*models.Academic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAcademics indicates an expected call of GetAllAcademics.
func (mr *MockAcademicRepositoryInterfaceMockRecorder) GetAllAcademics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAcademics", reflect.TypeOf((*MockAcademicRepositoryInterface)(nil).GetAllAcademics), ctx)
}

// UpdateAcademic mocks base method.
func (m *MockAcademicRepositoryInterface) UpdateAcademic(ctx context.Context, academic *models.Academic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcademic", ctx, academic)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAcademic indicates an expected call of UpdateAcademic.
func (mr *MockAcademicRepositoryInterfaceMockRecorder) UpdateAcademic(ctx, academic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcademic", reflect.TypeOf((*MockAcademicRepositoryInterface)(nil).UpdateAcademic), ctx, academic)
}
