// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/achievement/interface.go

// Package achievement is a generated GoMock package.
package achievement

import (
	context "context"
	models "go-tsukamoto/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAchievementRepositoryInterface is a mock of AchievementRepositoryInterface interface.
type MockAchievementRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementRepositoryInterfaceMockRecorder
}

// MockAchievementRepositoryInterfaceMockRecorder is the mock recorder for MockAchievementRepositoryInterface.
type MockAchievementRepositoryInterfaceMockRecorder struct {
	mock *MockAchievementRepositoryInterface
}

// NewMockAchievementRepositoryInterface creates a new mock instance.
func NewMockAchievementRepositoryInterface(ctrl *gomock.Controller) *MockAchievementRepositoryInterface {
	mock := &MockAchievementRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAchievementRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementRepositoryInterface) EXPECT() *MockAchievementRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateAchievement mocks base method.
func (m *MockAchievementRepositoryInterface) CreateAchievement(ctx context.Context, achievement *models.Achievement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAchievement", ctx, achievement)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAchievement indicates an expected call of CreateAchievement.
func (mr *MockAchievementRepositoryInterfaceMockRecorder) CreateAchievement(ctx, achievement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAchievement", reflect.TypeOf((*MockAchievementRepositoryInterface)(nil).CreateAchievement), ctx, achievement)
}

// DeleteAchievement mocks base method.
func (m *MockAchievementRepositoryInterface) DeleteAchievement(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAchievement", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAchievement indicates an expected call of DeleteAchievement.
func (mr *MockAchievementRepositoryInterfaceMockRecorder) DeleteAchievement(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAchievement", reflect.TypeOf((*MockAchievementRepositoryInterface)(nil).DeleteAchievement), ctx, id)
}

// GetAchievementByID mocks base method.
func (m *MockAchievementRepositoryInterface) GetAchievementByID(ctx context.Context, id int) (*models.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAchievementByID", ctx, id)
	ret0, _ := ret[0].(*models.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAchievementByID indicates an expected call of GetAchievementByID.
func (mr *MockAchievementRepositoryInterfaceMockRecorder) GetAchievementByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAchievementByID", reflect.TypeOf((*MockAchievementRepositoryInterface)(nil).GetAchievementByID), ctx, id)
}

// GetAchievementsByUserID mocks base method.
func (m *MockAchievementRepositoryInterface) GetAchievementsByUserID(ctx context.Context, userID int) ([]*models.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAchievementsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAchievementsByUserID indicates an expected call of GetAchievementsByUserID.
func (mr *MockAchievementRepositoryInterfaceMockRecorder) GetAchievementsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAchievementsByUserID", reflect.TypeOf((*MockAchievementRepositoryInterface)(nil).GetAchievementsByUserID), ctx, userID)
}

// GetByStudentID mocks base method.
func (m *MockAchievementRepositoryInterface) GetByStudentID(ctx context.Context, studentID int) ([]models.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStudentID", ctx, studentID)
	ret0, _ := ret[0].([]models.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStudentID indicates an expected call of GetByStudentID.
func (mr *MockAchievementRepositoryInterfaceMockRecorder) GetByStudentID(ctx, studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStudentID", reflect.TypeOf((*MockAchievementRepositoryInterface)(nil).GetByStudentID), ctx, studentID)
}

// UpdateAchievement mocks base method.
func (m *MockAchievementRepositoryInterface) UpdateAchievement(ctx context.Context, achievement *models.Achievement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAchievement", ctx, achievement)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAchievement indicates an expected call of UpdateAchievement.
func (mr *MockAchievementRepositoryInterfaceMockRecorder) UpdateAchievement(ctx, achievement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAchievement", reflect.TypeOf((*MockAchievementRepositoryInterface)(nil).UpdateAchievement), ctx, achievement)
}
