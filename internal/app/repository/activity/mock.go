// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/activity/interface.go

// Package activity is a generated GoMock package.
package activity

import (
	context "context"
	models "go-tsukamoto/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActivityRepositoryInterface is a mock of ActivityRepositoryInterface interface.
type MockActivityRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockActivityRepositoryInterfaceMockRecorder
}

// MockActivityRepositoryInterfaceMockRecorder is the mock recorder for MockActivityRepositoryInterface.
type MockActivityRepositoryInterfaceMockRecorder struct {
	mock *MockActivityRepositoryInterface
}

// NewMockActivityRepositoryInterface creates a new mock instance.
func NewMockActivityRepositoryInterface(ctrl *gomock.Controller) *MockActivityRepositoryInterface {
	mock := &MockActivityRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockActivityRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityRepositoryInterface) EXPECT() *MockActivityRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method.
func (m *MockActivityRepositoryInterface) CreateActivity(ctx context.Context, activity *models.Activity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", ctx, activity)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockActivityRepositoryInterfaceMockRecorder) CreateActivity(ctx, activity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockActivityRepositoryInterface)(nil).CreateActivity), ctx, activity)
}

// DeleteActivity mocks base method.
func (m *MockActivityRepositoryInterface) DeleteActivity(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActivity", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActivity indicates an expected call of DeleteActivity.
func (mr *MockActivityRepositoryInterfaceMockRecorder) DeleteActivity(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActivity", reflect.TypeOf((*MockActivityRepositoryInterface)(nil).DeleteActivity), ctx, id)
}

// GetActivitiesByUserID mocks base method.
func (m *MockActivityRepositoryInterface) GetActivitiesByUserID(ctx context.Context, userID int) ([]*models.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivitiesByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivitiesByUserID indicates an expected call of GetActivitiesByUserID.
func (mr *MockActivityRepositoryInterfaceMockRecorder) GetActivitiesByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivitiesByUserID", reflect.TypeOf((*MockActivityRepositoryInterface)(nil).GetActivitiesByUserID), ctx, userID)
}

// GetActivityByID mocks base method.
func (m *MockActivityRepositoryInterface) GetActivityByID(ctx context.Context, id int) (*models.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityByID", ctx, id)
	ret0, _ := ret[0].(*models.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityByID indicates an expected call of GetActivityByID.
func (mr *MockActivityRepositoryInterfaceMockRecorder) GetActivityByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityByID", reflect.TypeOf((*MockActivityRepositoryInterface)(nil).GetActivityByID), ctx, id)
}

// GetByStudentID mocks base method.
func (m *MockActivityRepositoryInterface) GetByStudentID(ctx context.Context, studentID int) ([]models.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStudentID", ctx, studentID)
	ret0, _ := ret[0].([]models.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStudentID indicates an expected call of GetByStudentID.
func (mr *MockActivityRepositoryInterfaceMockRecorder) GetByStudentID(ctx, studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStudentID", reflect.TypeOf((*MockActivityRepositoryInterface)(nil).GetByStudentID), ctx, studentID)
}

// GetUserByID mocks base method.
func (m *MockActivityRepositoryInterface) GetUserByID(ctx context.Context, id int) (*models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockActivityRepositoryInterfaceMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockActivityRepositoryInterface)(nil).GetUserByID), ctx, id)
}

// UpdateActivity mocks base method.
func (m *MockActivityRepositoryInterface) UpdateActivity(ctx context.Context, activity *models.Activity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActivity", ctx, activity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActivity indicates an expected call of UpdateActivity.
func (mr *MockActivityRepositoryInterfaceMockRecorder) UpdateActivity(ctx, activity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActivity", reflect.TypeOf((*MockActivityRepositoryInterface)(nil).UpdateActivity), ctx, activity)
}
